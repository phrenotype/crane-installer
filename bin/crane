#!/usr/bin/env php
<?php

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}


if (php_sapi_name() !== 'cli') {
    throw new \Error("Please run from command line.");
}

if (count($argv) !== 3 || $argv[1] !== "new") {
    echo "Invalid Syntax." . PHP_EOL;
    echo "Usage" . PHP_EOL;
    echo "orchid new appname" . PHP_EOL;
    exit;
}


$folder = $argv[2];

if (!file_exists($folder)) {
    mkdir($folder);
}

if (isEmptyFolder($folder)) {

    $base = realpath($folder);

    $changed = chdir($base);

    if ($changed) {

        mkdir("controllers");
        mkdir("middleware");
        mkdir("migrations");
        mkdir("models");
        mkdir("public");
        mkdir("routes");

        mkdir("views/errors", 0777, true);        

        copy(__DIR__ . "/../copy/views/errors/404.php", "./views/errors/404.php");
        copy(__DIR__ . "/../copy/.env", ".env");
        copy(__DIR__ . "/../copy/.htaccess", ".htaccess");
        copy(__DIR__ . "/../copy/.env", ".env");
        copy(__DIR__ . "/../copy/composer.json", "composer.json");
        copy(__DIR__ . "/../copy/index.php", "index.php");

        system("composer install");
    } else {
        echo "Failed to change directory." . PHP_EOL;
    }
} else {
    echo "Folder is empty." . PHP_EOL;
    exit;
}


function isEmptyFolder($dir)
{
    return (count(scandir($dir)) == 2);
}
